name: build-qt6
on: push
jobs:
  buildqt6:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '16'
    - uses: ./.github/build-qtbase
    - run: tar -cJf /opt/qt6.tar.xz -C /opt/qt6 .
    - uses: actions/upload-artifact@v2
      with:
        name: qtbase
        path: /opt/qt6.tar.xz
    - uses: ./.github/build-qtmodule
      with:
        module: qtshadertools
    - run: tar -cJf /opt/qt6.tar.xz -C /opt/qt6 .
    - uses: actions/upload-artifact@v2
      with:
        name: qtbase-qtshadertools
        path: /opt/qt6.tar.xz
    - uses: ./.github/build-qtmodule
      with:
        module: qtdeclarative
    - run: tar -cJf /opt/qt6.tar.xz -C /opt/qt6 .
    - uses: actions/upload-artifact@v2
      with:
        name: qtbase-qtshadertools-qtdeclarative
        path: /opt/qt6.tar.xz
    - uses: ./.github/build-qtmodule
      with:
        module: qtwebchannel
    - run: tar -cJf /opt/qt6.tar.xz -C /opt/qt6 .
    - uses: actions/upload-artifact@v2
      with:
        name: qtbase-qtshadertools-qtdeclarative-qtwebchannel
        path: /opt/qt6.tar.xz
    - uses: ./.github/build-qtmodule
      with:
        module: qtsvg
    - run: tar -cJf /opt/qt6.tar.xz -C /opt/qt6 .
    - uses: actions/upload-artifact@v2
      with:
        name: qtbase-qtshadertools-qtdeclarative-qtwebchannel-qtsvg
        path: /opt/qt6.tar.xz
  buildqt6-webengine:
    runs-on: macos-latest
    env:
      NODE_PATH: ${{github.workspace}}/.github/node_modules
    needs: buildqt6
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: qtbase-qtshadertools-qtdeclarative-qtwebchannel-qtsvg
    - run: mkdir -p /opt/qt6 && tar -xJf $PWD/qt6.tar.xz -C /opt/qt6
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '16'
    - uses: actions/github-script@v4
      with:
        github-token: which?
        script: |
          const cache = require('@actions/cache');
          const paths = [
              'build-qtwebengine',
          ]
          const key = 'mac-build-qtwebengine-3-' + Date.now();
          const restoreKeys = [
              'mac-build-qtwebengine-2-',
              'mac-build-qtwebengine-1-',
              'mac-build-qtwebengine-',
          ]
          const cacheKey = await cache.restoreCache(paths, key, restoreKeys)
          if(cacheKey) {
            console.log("Restored key: " + cacheKey);
            core.setOutput('success', 'true');
          }
      id: restore-cache
    - uses: ./.github/get-qt-source
      if: ${{ steps.restore-cache.outputs.success == 'true' }}
      with:
        module: qtwebengine
    - uses: ./.github/continue-build-qtmodule
      id: build1
      if: ${{ steps.restore-cache.outputs.success == 'true' }}
      with:
        module: qtwebengine
      continue-on-error: true
      timeout-minutes: 300
    - uses: ./.github/build-qtmodule
      id: build2
      if: ${{ steps.restore-cache.outputs.success != 'true' }}
      with:
        module: qtwebengine
      continue-on-error: true
      timeout-minutes: 300
    - run: tar -cJf /opt/qt6.tar.xz -C /opt/qt6 .
      if: ${{ steps.build1.outcome == 'success' || steps.build2.outcome == 'success' }}
    - uses: actions/upload-artifact@v2
      if: ${{ steps.build1.outcome == 'success' || steps.build2.outcome == 'success' }}
      with:
        name: qtbase-qtshadertools-qtdeclarative-qtwebchannel-qtsvg-qtwebengine
        path: /opt/qt6.tar.xz
    - uses: actions/github-script@v4
      with:
        github-token: which?
        script: |
          const cache = require('@actions/cache');
          const paths = [
              'build-qtwebengine',
          ]
          const key = 'mac-build-qtwebengine-3-' + Date.now();
          const cacheId = await cache.saveCache(paths, key)
      if: ${{ !(steps.build1.outcome == 'success' || steps.build2.outcome == 'success') }}
  buildqt6-webengine2:
    runs-on: macos-latest
    env:
      NODE_PATH: ${{github.workspace}}/.github/node_modules
    needs: buildqt6-webengine
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: qtbase-qtshadertools-qtdeclarative-qtwebchannel-qtsvg
    - run: mkdir -p /opt/qt6 && tar -xJf $PWD/qt6.tar.xz -C /opt/qt6
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '16'
    - uses: actions/github-script@v4
      with:
        github-token: which?
        script: |
          const cache = require('@actions/cache');
          const paths = [
              'build-qtwebengine',
          ]
          const key = 'mac-build-qtwebengine-3-' + Date.now();
          const restoreKeys = [
              'mac-build-qtwebengine-3-',
              'mac-build-qtwebengine-2-',
              'mac-build-qtwebengine-1-',
              'mac-build-qtwebengine-',
          ]
          const cacheKey = await cache.restoreCache(paths, key, restoreKeys)
          if(cacheKey) {
            core.setOutput('success', 'true');
          }
      id: restore-cache
    - uses: ./.github/get-qt-source
      if: ${{ steps.restore-cache.outputs.success == 'true' }}
      with:
        module: qtwebengine
    - uses: ./.github/continue-build-qtmodule
      id: build1
      if: ${{ steps.restore-cache.outputs.success == 'true' }}
      with:
        module: qtwebengine
      continue-on-error: true
      timeout-minutes: 300
    - uses: ./.github/build-qtmodule
      id: build2
      if: ${{ steps.restore-cache.outputs.success != 'true' }}
      with:
        module: qtwebengine
      continue-on-error: true
      timeout-minutes: 300
    - run: tar -cJf /opt/qt6.tar.xz -C /opt/qt6 .
      if: ${{ steps.build1.outcome == 'success' || steps.build2.outcome == 'success' }}
    - uses: actions/upload-artifact@v2
      if: ${{ steps.build1.outcome == 'success' || steps.build2.outcome == 'success' }}
      with:
        name: qtbase-qtshadertools-qtdeclarative-qtwebchannel-qtsvg-qtwebengine
        path: /opt/qt6.tar.xz
    - uses: actions/github-script@v4
      with:
        github-token: which?
        script: |
          const cache = require('@actions/cache');
          const paths = [
              'build-qtwebengine',
          ]
          const key = 'mac-build-qtwebengine-4-' + Date.now();
          const cacheId = await cache.saveCache(paths, key)
      if: ${{ !(steps.build1.outcome == 'success' || steps.build2.outcome == 'success') }}
