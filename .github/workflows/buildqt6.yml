name: build-qt6
on: push
jobs:
  buildqt6:
    runs-on: ubuntu-latest
    container: ubuntu:16.04
    steps:
    - uses: actions/checkout@v2
    - name: Update apt index
      run: apt-get update
    - name: Install Dependencies
      run: apt-get install -y python curl git xz-utils libegl1-mesa-dev libinput-dev libfontconfig1-dev libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev libxcb-util-dev libxcb-xinerama0-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev libgl1-mesa-dev libglu1-mesa-dev libgles2-mesa-dev libxrender-dev unzip bison build-essential gperf flex libasound2-dev libcups2-dev libdrm-dev libegl1-mesa-dev libnss3-dev libpci-dev libpulse-dev libudev-dev libxtst-dev libdbus-1-dev libxcomposite-dev libxcursor-dev libxrandr-dev libxkbfile-dev
    - uses: ./.github/download-extract-tar
      with:
        url: https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz
        dest: /opt/llvm
    - uses: ./.github/download-extract-tar
      with:
        url: https://github.com/Kitware/CMake/releases/download/v3.21.1/cmake-3.21.1-linux-x86_64.tar.gz
        format: gz
        dest: /opt/cmake
    - name: Install ninja
      run: |
        curl -L -O https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip
        mkdir -p /opt/ninja
        unzip ninja-linux -d /opt/ninja
    - uses: actions/setup-node@v2
      with:
        node-version: '16'
    - uses: actions/github-script@v4
      with:
        github-token: which?
        script: |
          var path = require('path');
          core.addPath('/opt/llvm/bin');
          core.addPath('/opt/cmake/bin');
          core.addPath('/opt/ninja');
          core.addPath(path.join(process.cwd(), '.github/helper'));
          core.exportVariable('CC', 'wclang');
          core.exportVariable('CXX', 'wclang++');
          core.exportVariable('LD_LIBRARY_PATH', '/opt/llvm/lib');
    - uses: ./.github/build-qtbase
    - run: tar -cJf /opt/qt6.tar.xz -C /opt/qt6 .
    - uses: actions/upload-artifact@v2
      with:
        name: qtbase
        path: /opt/qt6.tar.xz
    - uses: ./.github/build-qtmodule
      with:
        module: qtshadertools
    - run: tar -cJf /opt/qt6.tar.xz -C /opt/qt6 .
    - uses: actions/upload-artifact@v2
      with:
        name: qtbase-qtshadertools
        path: /opt/qt6.tar.xz
    - uses: ./.github/build-qtmodule
      with:
        module: qtdeclarative
    - run: tar -cJf /opt/qt6.tar.xz -C /opt/qt6 .
    - uses: actions/upload-artifact@v2
      with:
        name: qtbase-qtshadertools-qtdeclarative
        path: /opt/qt6.tar.xz
    - uses: ./.github/build-qtmodule
      with:
        module: qtwebchannel
    - run: tar -cJf /opt/qt6.tar.xz -C /opt/qt6 .
    - uses: actions/upload-artifact@v2
      with:
        name: qtbase-qtshadertools-qtdeclarative-qtwebchannel
        path: /opt/qt6.tar.xz
    - uses: ./.github/build-qtmodule
      with:
        module: qtsvg
    - run: tar -cJf /opt/qt6.tar.xz -C /opt/qt6 .
    - uses: actions/upload-artifact@v2
      with:
        name: qtbase-qtshadertools-qtdeclarative-qtwebchannel-qtsvg
        path: /opt/qt6.tar.xz
  buildqt6-webengine:
    strategy:
      matrix:
        i:
        - 0
        - 1
        - 2
        - 3
        - 4
      max-parallel: 1
    runs-on: ubuntu-latest
    container: ubuntu:16.04
    env:
      NODE_PATH: ${{github.workspace}}/.github/node_modules
    needs: buildqt6
    steps:
    - uses: actions/checkout@v2
    - uses: actions/github-script@v4
      if: ${{ matrix.i != 0 || github.run_attempt != '1' }}
      with:
        github-token: which?
        script: |
          const fs = require("fs");
          const cache = require("@actions/cache");
          const paths = [
              "build-qtwebengine",
          ]
          const key = "build-qtwebengine-${{ github.run_attempt }}-${{ matrix.i }}";
          var run_attempt = ${{ github.run_attempt }};
          var length = ${{ strategy.job-total }};// ${{ matrix.i }};
          var restoreKeys = [];
          for(var i = length - 1; i >= 0; i--) {
            for(var attempt = run_attempt; attempt >= 1; attempt--)
              restoreKeys.push("build-qtwebengine-" + attempt + "-" + i);
            }
          }
          const cacheKey = await cache.restoreCache(paths, key, restoreKeys);
          if(cacheKey) {
            console.log("Restored key: " + cacheKey);
            core.setOutput('success', 'true');
            if(fs.existsSync('./build-qtwebengine/.completed')) {
              core.setOutput('skip', 'true');
            }
          }
      id: restore-cache
    - name: Download artifact
      if: ${{ steps.restore-cache.outputs.skip != 'true' }}
      uses: actions/download-artifact@v2
      with:
        name: qtbase-qtshadertools-qtdeclarative-qtwebchannel-qtsvg
    - name: Update apt index
      if: ${{ steps.restore-cache.outputs.skip != 'true' }}
      run: apt-get update
    - name: Install Dependencies
      if: ${{ steps.restore-cache.outputs.skip != 'true' }}
      run: apt-get install -y python curl git xz-utils libegl1-mesa-dev libinput-dev libfontconfig1-dev libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev libxcb-util-dev libxcb-xinerama0-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev libgl1-mesa-dev libglu1-mesa-dev libgles2-mesa-dev libxrender-dev unzip bison build-essential gperf flex libasound2-dev libcups2-dev libdrm-dev libegl1-mesa-dev libnss3-dev libpci-dev libpulse-dev libudev-dev libxtst-dev libdbus-1-dev libxcomposite-dev libxcursor-dev libxrandr-dev libxkbfile-dev
    - run: mkdir -p /opt/qt6 && tar -xJf $PWD/qt6.tar.xz -C /opt/qt6
      if: ${{ steps.restore-cache.outputs.skip != 'true' }}
    - uses: ./.github/download-extract-tar
      if: ${{ steps.restore-cache.outputs.skip != 'true' }}
      with:
        url: https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz
        dest: /opt/llvm
    - uses: ./.github/download-extract-tar
      if: ${{ steps.restore-cache.outputs.skip != 'true' }}
      with:
        url: https://github.com/Kitware/CMake/releases/download/v3.21.1/cmake-3.21.1-linux-x86_64.tar.gz
        format: gz
        dest: /opt/cmake
    - name: Install ninja
      if: ${{ steps.restore-cache.outputs.skip != 'true' }}
      run: |
        curl -L -O https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip
        mkdir -p /opt/ninja
        unzip ninja-linux -d /opt/ninja
    - uses: actions/setup-node@v2
      if: ${{ steps.restore-cache.outputs.skip != 'true' }}
      with:
        node-version: '16'
    - uses: actions/github-script@v4
      if: ${{ steps.restore-cache.outputs.skip != 'true' }}
      with:
        github-token: which?
        script: |
          var path = require('path');
          core.addPath('/opt/llvm/bin');
          core.addPath('/opt/cmake/bin');
          core.addPath('/opt/ninja');
          core.addPath(path.join(process.cwd(), '.github/helper'));
          core.exportVariable('CC', 'wclang');
          core.exportVariable('CXX', 'wclang++');
          core.exportVariable('LD_LIBRARY_PATH', '/opt/llvm/lib');
    - uses: ./.github/get-qt-source
      if: ${{ steps.restore-cache.outputs.skip != 'true' && steps.restore-cache.outputs.success == 'true' }}
      with:
        module: qtwebengine
    - uses: ./.github/continue-build-qtmodule
      id: build1
      if: ${{ steps.restore-cache.outputs.skip != 'true' && steps.restore-cache.outputs.success == 'true' }}
      with:
        module: qtwebengine
      continue-on-error: true
      timeout-minutes: 300
    - uses: ./.github/build-qtmodule
      id: build2
      if: ${{ steps.restore-cache.outputs.skip != 'true' && steps.restore-cache.outputs.success != 'true' }}
      with:
        module: qtwebengine
      continue-on-error: true
      timeout-minutes: 300
    - run: tar -cJf /opt/qt6.tar.xz -C /opt/qt6 .
      if: ${{ steps.restore-cache.outputs.skip != 'true' && (steps.build1.outcome == 'success' || steps.build2.outcome == 'success') }}
    - uses: actions/upload-artifact@v2
      if: ${{ steps.restore-cache.outputs.skip != 'true' && (steps.build1.outcome == 'success' || steps.build2.outcome == 'success') }}
      with:
        name: qtbase-qtshadertools-qtdeclarative-qtwebchannel-qtsvg-qtwebengine
        path: /opt/qt6.tar.xz
    - name: Write completed file
      if: ${{ steps.restore-cache.outputs.skip != 'true' && (steps.build1.outcome == 'success' || steps.build2.outcome == 'success') }}
      run: echo 1 > ./build-qtwebengine/.completed
    - uses: actions/github-script@v4
      if: ${{ steps.restore-cache.outputs.skip != 'true' }}
      with:
        github-token: which?
        script: |
          const cache = require("@actions/cache");
          const paths = [
              "build-qtwebengine",
          ];
          const key = "build-qtwebengine-${{ github.run_attempt }}-${{ matrix.i }}";
          const cacheId = await cache.saveCache(paths, key);